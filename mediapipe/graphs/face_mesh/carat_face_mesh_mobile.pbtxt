# MediaPipe graph that performs face mesh with TensorFlow Lite on GPU.

# GPU buffer. (GpuBuffer)
input_stream: "input_video"

# Max number of faces to detect/process. (int)
input_side_packet: "num_faces"

input_side_packet: "forehead_size"
input_side_packet: "cheekbone_size"
input_side_packet: "temple_size"
input_side_packet: "chin_size"
input_side_packet: "chin_height"
input_side_packet: "chin_sharpness"
input_side_packet: "eye_size"
input_side_packet: "eye_height"
input_side_packet: "eye_spacing"
input_side_packet: "front_eye_size"
input_side_packet: "under_eye_size"
input_side_packet: "pupil_size"
input_side_packet: "nose_height"
input_side_packet: "nose_width"
input_side_packet: "nose_bridge_size"
input_side_packet: "nose_base_size"
input_side_packet: "nose_end_size"
input_side_packet: "philtrum_height"
input_side_packet: "lip_size"
input_side_packet: "lip_end_up"
input_side_packet: "skin_smooth"

# Output image with rendered results. (GpuBuffer)
output_stream: "output_video"
# Collection of detected/processed faces, each represented as a list of
# landmarks. (std::vector<NormalizedLandmarkList>)
output_stream: "multi_face_landmarks"

# Throttles the images flowing downstream for flow control. It passes through
# the very first incoming image unaltered, and waits for downstream nodes
# (calculators and subgraphs) in the graph to finish their tasks before it
# passes through another image. All images that come in while waiting are
# dropped, limiting the number of in-flight images in most part of the graph to
# 1. This prevents the downstream nodes from queuing up incoming images and data
# excessively, which leads to increased latency and memory usage, unwanted in
# real-time mobile applications. It also eliminates unnecessarily computation,
# e.g., the output produced by a node may get dropped downstream if the
# subsequent nodes are still busy processing previous inputs.
node {
  calculator: "FlowLimiterCalculator"
  input_stream: "input_video"
  input_stream: "FINISHED:output_video"
  input_stream_info: {
    tag_index: "FINISHED"
    back_edge: true
  }
  output_stream: "throttled_input_video"
}

# Defines side packets for further use in the graph.
node {
  calculator: "ConstantSidePacketCalculator"
  output_side_packet: "PACKET:with_attention"
  node_options: {
    [type.googleapis.com/mediapipe.ConstantSidePacketCalculatorOptions]: {
      packet { bool_value: true }
    }
  }
}

# Subgraph that detects faces and corresponding landmarks.
node {
  calculator: "FaceLandmarkFrontGpu"
  input_stream: "IMAGE:throttled_input_video"
  input_side_packet: "NUM_FACES:num_faces"
  input_side_packet: "WITH_ATTENTION:with_attention"
  output_stream: "LANDMARKS:multi_face_landmarks"
  output_stream: "ROIS_FROM_LANDMARKS:face_rects_from_landmarks"
  output_stream: "DETECTIONS:face_detections"
  output_stream: "ROIS_FROM_DETECTIONS:face_rects_from_detections"
}

# Subgraph that renders face-landmark annotation onto the input image.
node {
  calculator: "CaratFaceRendererGpu"
  input_stream: "IMAGE:throttled_input_video"
  input_stream: "LANDMARKS:multi_face_landmarks"
  input_side_packet: "FOREHEAD_SIZE:forehead_size"
  input_side_packet: "CHEEKBONE_SIZE:cheekbone_size"
  input_side_packet: "TEMPLE_SIZE:temple_size"
  input_side_packet: "CHIN_SIZE:chin_size"
  input_side_packet: "CHIN_HEIGHT:chin_height"
  input_side_packet: "CHIN_SHARPNESS:chin_sharpness"
  input_side_packet: "EYE_SIZE:eye_size"
  input_side_packet: "EYE_HEIGHT:eye_height"
  input_side_packet: "EYE_SPACING:eye_spacing"
  input_side_packet: "FRONT_EYE_SIZE:front_eye_size"
  input_side_packet: "UNDER_EYE_SIZE:under_eye_size"
  input_side_packet: "PUPIL_SIZE:pupil_size"
  input_side_packet: "NOSE_HEIGHT:nose_height"
  input_side_packet: "NOSE_WIDTH:nose_width"
  input_side_packet: "NOSE_BRIDGE_SIZE:nose_bridge_size"
  input_side_packet: "NOSE_BASE_SIZE:nose_base_size"
  input_side_packet: "NOSE_END_SIZE:nose_end_size"
  input_side_packet: "PHILTRUM_HEIGHT:philtrum_height"
  input_side_packet: "LIP_SIZE:lip_size"
  input_side_packet: "LIP_END_UP:lip_end_up"
  input_side_packet: "SKIN_SMOOTH:skin_smooth"
  output_stream: "IMAGE:output_video"
}
